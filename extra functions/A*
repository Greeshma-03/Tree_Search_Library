else if (strcmp(strategy, "A*") == 0)
    {
        int start, dest;
        printf("Enter the starting node: ");
        scanf("%d", &start);
        printf("Enter thr destination node: ");
        scanf("%d", &dest);
        int mat[n + 1][n + 1];
        //Floyd Warshall
        for (int i = 0; i < n + 1; i++)
        {
            for (int j = 0; j < n + 1; j++)
            {
                if (i == j)
                    mat[i][j] = 0;
                else
                    mat[i][j] = INT_MAX;
            }
        }

        for (int i = 0; i < n; i++)
        {
            Node N = parentptr[i];
            int j = 0;
            
            while (j < N->children.list.size)
            {
                mat[i][N->children.list.obj[j]->self - 1] = N->children.list.obj[j]->edge_wt;
                mat[N->children.list.obj[j]->self - 1][i] = N->children.list.obj[j]->edge_wt;
                j++;
            }
        }

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                for (int k = 0; k < n; k++)
                {
                    if (mat[i][k] != INT_MAX && mat[k][j] != INT_MAX && mat[i][j] > mat[i][k] + mat[k][j])
                    {
                        mat[i][j] = mat[i][k] + mat[k][j];
                    }
                }
            }
        }

        for (int i = 0; i < n; i++)
        {
            parentptr[i]->h = mat[i][dest - 1];
        }

        PQ Q = Init_pq(Q, n);
        parentptr[start - 1]->g = 0;
        parentptr[start - 1]->f = parentptr[start - 1]->g + parentptr[start - 1]->h;
        parentptr[start - 1]->seen_time = 1;
        Push(Q, parentptr[start - 1], node_comparator_astar);
        int idx = start - 1;
        bool arr[n + 1];
        for (int i = 0; i < n; i++)
        {
            arr[i] = false;
        }

        while (!IsEmpty(Q) && idx != dest)
        {
            Node random = Top(Q);
            Node new_node = parentptr[random->self - 1];
            arr[random->self - 1] = true;
            int min = INT_MAX;
            Pop(Q, node_comparator_astar);
            for (int i = 0; i < new_node->children.list.size; i++)
            {

                counter++;
                idx = new_node->children.list.obj[i]->self - 1;
                if (parentptr[idx]->self == dest)
                    break;
                if (!arr[idx])
                {
                    parentptr[idx]->g = new_node->g + parentptr[idx]->edge_wt;
                    parentptr[idx]->f = parentptr[idx]->g + parentptr[idx]->h;
                    if (min < parentptr[idx]->f)
                    {
                        new_node->children.list.obj[i]->seen_time = counter;
                        Push(Q, parentptr[idx], node_comparator_astar);
                        min = parentptr[idx]->f;
                    }
                }
            }
        }
        printf("%d\n", dest);
    }